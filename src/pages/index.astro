---
import { fallbackEvents } from '../data/fallbackEvents.js';
import BaseLayout from '../layouts/BaseLayout.astro';

// Fetch event data from GitHub repository with error handling
async function fetchEventData() {
	try {
		console.log("Fetching event data...");
		const response = await fetch('https://raw.githubusercontent.com/EthCzech/czechcryptoweek/main/events/index.json');
		
		if (!response.ok) {
			console.error(`Failed to fetch data: ${response.status} ${response.statusText}`);
			console.log("Using fallback events:", fallbackEvents.map(e => e.name));
			return fallbackEvents;
		}
		
		const data = await response.json();
		console.log("Successfully fetched event data");
		return data;
	} catch (error) {
		console.error("Error fetching event data:", error);
		console.log("Using fallback events due to error:", fallbackEvents.map(e => e.name));
		return fallbackEvents;
	}
}

// Define functions for sorting and processing events
function processEvents(events) {
	console.log("Processing events:", events.map(e => e.name));

	const confirmed = events.filter(event => event.confirmed)
		.sort((a, b) => {
			// Sort by dateISO (start date) for proper ordering
			if (!a.dateISO) return 1;
			if (!b.dateISO) return -1;
			return a.dateISO.localeCompare(b.dateISO);
		});
	const tbc = events.filter(event => !event.confirmed);
	
	// Debug events
	console.log("All events:", events.map(e => e.name));
	console.log("Confirmed events:", confirmed.map(e => e.name));
	console.log("TBC events:", tbc.map(e => e.name));

	// Get unique dates for filtering
	const uniqueDatesMap = new Map();
	
	// Track all events by date for the day view
	const eventsByDate = {};
	
	// Expand multi-day events to appear on each day they occur
	confirmed.forEach(event => {
		if (!event.dateISO) return;
		
		// Parse date ranges for multi-day events
		let startDate, endDate;
		
		if (event.date && event.date.includes('-')) {
			// Check if this is a date range like "May 28-31, 2025"
			const dateParts = event.date.match(/([a-zA-Z]+)\s+(\d+)-(\d+),\s+(\d+)/);
			
			if (dateParts) {
				// This is a multi-day event in the same month
				const [_, month, startDay, endDay, year] = dateParts;
				startDate = new Date(event.dateISO);
				
				// Create end date by parsing from the date string
				const monthIndex = new Date(`${month} 1, ${year}`).getMonth();
				endDate = new Date(parseInt(year), monthIndex, parseInt(endDay));
			} else if (event.date.includes(' - ')) {
				// This is a date range like "May 30 - June 1, 2025"
				const [startDateStr, endDateStr] = event.date.split(' - ');
				startDate = new Date(event.dateISO);
				
				// Try to parse the end date from the format
				const endParts = endDateStr.match(/([a-zA-Z]+)\s+(\d+),\s+(\d+)/);
				if (endParts) {
					const [_, month, day, year] = endParts;
					const monthIndex = new Date(`${month} 1, ${year}`).getMonth();
					endDate = new Date(parseInt(year), monthIndex, parseInt(day));
				}
			}
		}
		
		// Default to single day if no range was parsed
		if (!startDate) {
			startDate = new Date(event.dateISO);
			endDate = new Date(event.dateISO);
		}
		
		// Add the event to each day it spans
		let currentDate = new Date(startDate);
		let dayCounter = 1;
		const totalDays = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;
		
		while (currentDate <= endDate) {
			const dateString = currentDate.toISOString().split('T')[0];
			
			// Create a copy of the event for this day with day indicator
			const eventCopy = {...event};
			
			// Add day indicator for multi-day events
			if (totalDays > 1) {
				eventCopy.dayIndicator = `Day ${dayCounter}/${totalDays}`;
			}
			
			// Initialize the array for this date if it doesn't exist yet
			if (!eventsByDate[dateString]) {
				eventsByDate[dateString] = [];
			}
			
			// Add event to this date's array
			eventsByDate[dateString].push(eventCopy);
			
			// Add to unique dates map for filtering UI
			uniqueDatesMap.set(dateString, {
				date: dateString,
				displayDate: currentDate.toLocaleDateString('en-US', {
					month: 'short',
					day: 'numeric'
				})
			});
			
			// Move to next day
			currentDate.setDate(currentDate.getDate() + 1);
			dayCounter++;
		}
	});
	
	// Convert the map to an array and sort by date
	const uniqueDates = Array.from(uniqueDatesMap.values())
		.sort((a, b) => new Date(a.date) - new Date(b.date));
	
	// Get unique tags for filtering
	const uniqueTags = new Set();
	confirmed.forEach(event => {
		if (event.tags) {
			event.tags.forEach(tag => uniqueTags.add(tag));
		}
	});
	
	return {
		confirmedEvents: confirmed,
		tbcEvents: tbc,
		uniqueDates,
		uniqueTags: Array.from(uniqueTags).sort(),
		eventsByDate
	};
}

// Fetch event data and handle errors
const eventData = await fetchEventData();
const { confirmedEvents, tbcEvents, uniqueDates, uniqueTags, eventsByDate } = processEvents(eventData);

// Get all unique tags for filtering UI
const allTags = [...uniqueTags];

console.log("Final confirmed events:", confirmedEvents.map(e => e.name));
console.log("Final TBC events:", tbcEvents);
console.log("TBC events length:", tbcEvents.length);
---

<BaseLayout 
	title="Czech Crypto Week 2025 | Prague's Leading Blockchain Series" 
	description="Join the largest blockchain and cryptocurrency event series in Prague. A week of conferences, hackathons, and workshops bringing together the global crypto community in the Czech Republic.">
	<!-- Hero Section -->
	<section class="hero">
		<img src="/images/cover2.jpg" alt="Czech Crypto Week" class="hero-image">
	</section>

	<!-- About Section -->
	<section id="about" class="about-section">
		<div class="container">
			<h2>About</h2>
			<div class="about-content">
				<div class="about-text">
					<p class="about-description">
						Czech Crypto Week is Prague's leading blockchain and cryptocurrency event series. It runs from May 26 to June 1, 2025, in Prague, Czech Republic, featuring conferences, hackathons, workshops, and networking focused on blockchain innovation.
					</p>
					<div class="calendar-button-container">
						<a href="https://cryptonomads.org/CzechCryptoWeek2025" target="_blank" rel="noopener noreferrer" class="calendar-button">
							Crypto Nomads Club Calendar 2025
						</a>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Confirmed Events Section -->
	<section id="events" class="events-section">
		<h2>Confirmed Events</h2>
		<p class="event-counter">{confirmedEvents.length}</p>
		
		<!-- Filtering UI -->
		<div class="filtering-ui">
			<!-- View Mode Toggle -->
			<div class="view-toggle">
				<button id="card-view-btn" class="view-btn active" aria-pressed="true">
					Overview
				</button>
				<button id="day-view-btn" class="view-btn" aria-pressed="false">
					Days
				</button>
			</div>
			
			<!-- Filter by Day -->
			<div class="filter-group">
				<div class="days-filter">
					<button class="day-btn active" data-day="all">All Days</button>
					{uniqueDates.map(date => (
						<button class="day-btn" data-day={date.date}>{date.displayDate}</button>
					))}
				</div>
			</div>
			
			<!-- Filter by Categories/Tags -->
			<div class="filter-group">
				<div class="tags-filter">
					{allTags.map(tag => (
						<button class="tag-btn" data-tag={tag}>{tag}</button>
					))}
				</div>
			</div>
			
			<!-- Active Filters & Reset -->
			<div class="active-filters">
				<div id="active-filters-list"></div>
				<button id="reset-filters" class="reset-btn">Reset All Filters</button>
			</div>
		</div>
		
		<!-- Card View (default) -->
		<div id="card-view" class="view-mode active">
			<ul class="event-list">
				{confirmedEvents.map(event => (
					<li class="event-box" data-date={event.dateISO} data-tags={event.tags ? event.tags.join(',') : ''}>
						<a href={`/events/${event.id}/`} class="event-link">
							<div class="event-content">
								<h3 class="event-title">{event.name}</h3>
								<p class="event-date">{event.date}</p>
								<p class="event-description">{event.short_description}</p>
								{event.tags && event.tags.length > 0 && (
									<div class="event-tags">
										{event.tags.map(tag => (
											<span class="event-tag">{tag}</span>
										))}
									</div>
								)}
							</div>
						</a>
						<div class="event-actions">
							{event.tickets && (
								<a href={event.tickets} target="_blank" rel="noopener noreferrer" class="tickets-link">
									Tickets
								</a>
							)}
							{!event.tickets && event.website && (
								<a href={event.website} target="_blank" rel="noopener noreferrer" class="website-link">
									Website
								</a>
							)}
						</div>
					</li>
				))}
			</ul>
			<div id="no-results" class="no-results" style="display: none;">
				<p>No events match your current filters. Try adjusting your selection.</p>
				<button id="reset-filters-inline" class="reset-btn">Reset All Filters</button>
			</div>
		</div>
		
		<!-- Days View -->
		<div id="day-view" class="view-mode">
			{Object.entries(eventsByDate).sort(([dateA], [dateB]) => dateA.localeCompare(dateB)).map(([date, dayEvents]) => (
				<div class="day-group" data-date={date}>
					<h3 class="day-header">{new Date(date).toLocaleDateString('en-US', {weekday: 'long', month: 'long', day: 'numeric', year: 'numeric'})}</h3>
					<ul class="day-events">
						{dayEvents.map(event => (
							<li class="day-event" data-tags={event.tags ? event.tags.join(',') : ''}>
								<div class="day-event-wrapper">
									<a href={`/events/${event.id}/`} class="day-event-link">
										<div class="day-event-content">
											<h4 class="day-event-title">
												{event.name}
												{event.dayIndicator && <span class="day-indicator">{event.dayIndicator}</span>}
											</h4>
											<p class="day-event-description">{event.short_description}</p>
											{event.tags && event.tags.length > 0 && (
												<div class="event-tags day-event-tags">
													{event.tags.map(tag => (
														<span class="event-tag">{tag}</span>
													))}
												</div>
											)}
										</div>
									</a>
									<div class="day-event-actions">
										{event.tickets && (
											<a href={event.tickets} target="_blank" rel="noopener noreferrer" class="day-tickets-link">
												Tickets
											</a>
										)}
										{!event.tickets && event.website && (
											<a href={event.website} target="_blank" rel="noopener noreferrer" class="day-website-link">
												Website
											</a>
										)}
									</div>
								</div>
							</li>
						))}
					</ul>
				</div>
			))}
			<div id="no-day-results" class="no-results" style="display: none;">
				<p>No events match your current filters. Try adjusting your selection.</p>
				<button id="reset-filters-day-inline" class="reset-btn">Reset All Filters</button>
			</div>
		</div>
	</section>
	
	<!-- TBC Events Section -->
	{tbcEvents.length > 0 && (
		<section class="tbc-section">
			<h2>To Be Confirmed</h2>
			<ul class="tbc-list">
				{tbcEvents.map(event => (
					<li class="tbc-item">
						<span class="tbc-name">{event.name}</span>
						<span class="tbc-label">TBC</span>
					</li>
				))}
			</ul>
		</section>
	)}
	
	<!-- Contribute Section -->
	<section class="contribute-section">
		<h2>Contribute</h2>
		<div class="contribute-content">
			<p>Czech Crypto Week is an open-source initiative. Anyone can organize a side event or contribute to the project.</p>
			
			<div class="contribute-options">
				<div class="contribute-option">
					<h3>Add Your Event</h3>
					<p>Want to organize an event during Czech Crypto Week? Submit your event details through a GitHub pull request or contact us directly.</p>
					<div class="coming-soon-form">
						<p class="form-note">✨ Event submission form coming soon! ✨</p>
						<a href="mailto:ethczech@gmail.com" class="contribute-button">Contact Us</a>
					</div>
				</div>
				
				<div class="contribute-option">
					<h3>Improve the Website</h3>
					<p>This website is open-source. Help us improve it by submitting pull requests or reporting issues on GitHub.</p>
					<a href="https://github.com/EthCzech/czechcryptoweek" target="_blank" rel="noopener noreferrer" class="contribute-button">GitHub Repository</a>
				</div>
			</div>
		</div>
	</section>

	<style>
		/* Hero Section */
		.hero {
			position: relative;
			overflow: hidden;
			margin-bottom: 40px;
			width: 100%;
		}

		.hero-image {
			width: 100%;
			height: auto;
			display: block;
		}

		.hero-content {
			display: none;
		}

		.hero h1 {
			color: white;
			font-size: 3.2rem;
			font-weight: 700;
			margin: 0 0 20px 0;
			letter-spacing: -0.5px;
			text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
		}

		.hero-cta {
			display: inline-block;
			background-color: white;
			color: var(--primary);
			font-weight: 500;
			padding: 12px 25px;
			border-radius: 50px;
			transition: transform 0.3s, box-shadow 0.3s;
		}

		.hero-cta:hover {
			transform: translateY(-3px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.hero::before {
			content: none;
		}

		.pixelated-pattern {
			display: none;
		}

		.hero-logo {
			display: none;
		}

		.logo-pixels {
			display: none;
		}

		.hero-subtitle {
			display: none;
		}

		.hero-description {
			display: none;
		}

		.hero-pattern {
			display: none;
		}

		@media (max-width: 768px) {
			.hero h1 {
				font-size: 2.5rem;
			}
			
			.hero-cta {
				padding: 10px 20px;
				font-size: 0.95rem;
			}
		}
		
		@media (max-width: 480px) {
			.hero h1 {
				font-size: 2rem;
			}
			
			.hero-content {
				bottom: 20px;
			}
		}

		/* About Section */
		.about-section {
			margin: 60px 0;
			padding: 0 20px;
		}
		
		.container {
			max-width: 1000px;
			margin: 0 auto;
		}
		
		.about-section h2 {
			text-align: center;
			margin-bottom: 30px;
			color: var(--primary);
			font-size: 2.2rem;
		}
		
		.about-content {
			display: flex;
			align-items: center;
			justify-content: center;
		}
		
		.about-text {
			max-width: 800px;
		}
		
		.about-description {
			font-size: 1.2rem;
			line-height: 1.6;
			text-align: center;
		}
		
		.calendar-button-container {
			display: flex;
			justify-content: center;
			margin-top: 25px;
		}
		
		.calendar-button {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			font-weight: 500;
			padding: 12px 25px;
			border-radius: 50px;
			transition: transform 0.3s, box-shadow 0.3s;
			text-align: center;
		}
		
		.calendar-button:hover {
			transform: translateY(-3px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}
		
		@media (max-width: 768px) {
			.about-description {
				font-size: 1.1rem;
			}
			
			.calendar-button {
				padding: 10px 20px;
				font-size: 0.95rem;
			}
		}

		/* Events Section */
		.events-section, .tbc-section {
			margin: 60px 0;
		}

		.events-section h2, .tbc-section h2 {
			text-align: center;
			margin-bottom: 30px;
			color: var(--primary);
			font-size: 2.2rem;
		}

		.event-counter {
			text-align: center;
			margin-top: -15px; /* Adjust margin */
			margin-bottom: 25px; /* Adjust margin */
			font-size: 2.5rem; /* Increase font size significantly */
			font-weight: 700; /* Make it bolder */
			color: var(--primary, #0544C7); /* Use primary color */
			line-height: 1; /* Adjust line height */
		}

		/* Filtering UI */
		.filtering-ui {
			margin-bottom: 30px;
			background-color: var(--bg-light);
			padding: 25px;
			border-radius: 8px;
			text-align: center;
		}
		
		.view-toggle {
			display: flex;
			justify-content: center;
			margin-bottom: 25px;
			gap: 15px;
		}
		
		.view-btn {
			background-color: white;
			border: 2px solid var(--border-color);
			padding: 10px 20px;
			border-radius: 8px;
			cursor: pointer;
			transition: all 0.2s;
			display: flex;
			align-items: center;
			justify-content: center;
		}
		
		.view-btn svg {
			width: 22px;
			height: 22px;
		}
		
		.view-btn.active {
			background-color: var(--primary);
			color: white;
			border-color: var(--primary);
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		}
		
		.view-btn:hover:not(.active) {
			background-color: var(--bg-hover);
			transform: translateY(-2px);
		}
		
		.sr-only {
			position: absolute;
			width: 1px;
			height: 1px;
			padding: 0;
			margin: -1px;
			overflow: hidden;
			clip: rect(0, 0, 0, 0);
			white-space: nowrap;
			border-width: 0;
		}
		
		.filter-group {
			margin-bottom: 25px;
		}
		
		.filter-title {
			font-size: 1.1rem;
			margin-bottom: 15px;
			color: var(--primary);
			text-align: center;
			font-weight: 500;
		}
		
		.days-filter, .tags-filter {
			display: flex;
			flex-wrap: wrap;
			gap: 10px;
			justify-content: center;
		}
		
		.day-btn {
			background-color: white;
			border: 1px solid var(--border-color);
			padding: 8px 16px;
			border-radius: 50px;
			font-size: 1rem;
			cursor: pointer;
			transition: all 0.2s;
			font-weight: 500;
		}
		
		.tag-btn {
			background-color: white;
			border: 1px solid var(--border-color);
			padding: 6px 12px;
			border-radius: 50px;
			font-size: 0.9rem;
			cursor: pointer;
			transition: all 0.2s;
		}
		
		.day-btn.active {
			background-color: var(--primary);
			color: white;
			border-color: var(--primary);
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		}
		
		.tag-btn.active {
			background-color: var(--secondary);
			color: white;
			border-color: var(--secondary);
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		}
		
		.day-btn:hover:not(.active), .tag-btn:hover:not(.active) {
			background-color: var(--bg-hover);
			transform: translateY(-2px);
		}
		
		.active-filters {
			display: flex;
			align-items: center;
			justify-content: space-between;
			margin-top: 15px;
		}
		
		#active-filters-list {
			display: flex;
			flex-wrap: wrap;
			gap: 5px;
		}
		
		.active-filter {
			display: inline-flex;
			align-items: center;
			background-color: var(--bg-light);
			border: 1px solid var(--border-color);
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 0.85rem;
		}
		
		.remove-filter {
			margin-left: 5px;
			cursor: pointer;
		}
		
		.reset-btn {
			background-color: var(--bg-light);
			border: 1px solid var(--border-color);
			padding: 6px 12px;
			border-radius: 4px;
			font-size: 0.85rem;
			cursor: pointer;
			transition: all 0.2s;
		}
		
		.reset-btn:hover {
			background-color: var(--bg-hover);
		}
		
		/* View Modes */
		.view-mode {
			display: none;
		}
		
		.view-mode.active {
			display: block;
		}
		
		/* Card View (default) */
		.event-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
			gap: 25px;
		}

		.event-box {
			background-color: var(--bg-light);
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			transition: transform 0.3s, box-shadow 0.3s;
			position: relative;
			display: flex;
			flex-direction: column;
			height: 100%;
		}

		.event-box:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.event-link {
			display: block;
			text-decoration: none;
			color: inherit;
			flex: 1;
		}

		.event-content {
			padding: 25px;
			flex: 1;
			display: flex;
			flex-direction: column;
			min-height: 220px;
		}

		.event-title {
			color: var(--primary);
			font-size: 1.4rem;
			margin-bottom: 10px;
			min-height: 3.5rem;
			display: flex;
			align-items: flex-start;
		}

		.event-date {
			color: var(--text-light);
			font-size: 0.95rem;
			margin-bottom: 15px;
			flex-shrink: 0;
		}

		.event-description {
			margin-bottom: 20px;
			line-height: 1.5;
			flex-grow: 1;
		}

		.event-tags {
			display: flex;
			flex-wrap: wrap;
			gap: 6px;
			margin-bottom: 10px;
		}

		.event-tag {
			background-color: var(--primary-light);
			color: var(--primary-dark);
			padding: 3px 8px;
			border-radius: 4px;
			font-size: 0.8rem;
			font-weight: 500;
		}

		.event-actions {
			display: flex;
			padding: 0 25px 25px;
			justify-content: center;
		}
		
		.website-link {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			padding: 8px 16px;
			border-radius: 4px;
			font-size: 0.9rem;
			font-weight: 500;
			transition: background-color 0.3s;
			text-align: center;
		}

		.website-link:hover {
			background-color: var(--primary-dark);
		}
		
		.tickets-link {
			display: inline-block;
			background-color: #34c759;
			color: white;
			padding: 8px 16px;
			border-radius: 4px;
			font-size: 0.9rem;
			font-weight: 500;
			transition: background-color 0.3s;
			text-align: center;
		}
		
		.tickets-link:hover {
			background-color: #2aa147;
		}
		
		/* Days View */
		.day-group {
			margin-bottom: 40px;
		}
		
		.day-header {
			background-color: var(--primary-light);
			color: var(--primary-dark);
			padding: 15px 25px;
			border-radius: 8px;
			margin-bottom: 20px;
			font-size: 1.4rem;
			font-weight: 600;
			text-align: center;
		}
		
		.day-events {
			display: flex;
			flex-direction: column;
			gap: 15px;
		}
		
		.day-event {
			background-color: var(--bg-light);
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			transition: transform 0.3s, box-shadow 0.3s;
		}
		
		.day-event:hover {
			transform: translateY(-3px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.day-event-wrapper {
			display: flex;
			align-items: center;
			justify-content: space-between;
			padding: 20px;
		}

		.day-event-link {
			text-decoration: none;
			color: inherit;
			flex: 1;
		}
		
		.day-event-content {
			display: flex;
			flex-direction: column;
		}
		
		.day-event-title {
			color: var(--primary);
			font-size: 1.2rem;
			margin-bottom: 5px;
			display: flex;
			align-items: center;
		}
		
		.day-indicator {
			background-color: var(--primary-light);
			color: var(--primary-dark);
			font-size: 0.8rem;
			padding: 2px 8px;
			border-radius: 50px;
			margin-left: 10px;
		}
		
		.day-event-description {
			font-size: 0.95rem;
			color: var(--text-base);
		}
		
		.day-event-tags {
			margin-top: 8px;
			margin-bottom: 0;
		}
		
		.day-event-actions {
			display: flex;
			justify-content: center;
			min-width: 120px;
			width: 120px;
		}
		
		.day-website-link, .day-tickets-link {
			width: 100px;
			text-align: center;
			background-color: var(--primary);
			color: white;
			padding: 8px 16px;
			border-radius: 4px;
			font-size: 0.9rem;
			font-weight: 500;
			transition: background-color 0.3s;
			white-space: nowrap;
		}
		
		.day-website-link:hover {
			background-color: var(--primary-dark);
		}
		
		.day-tickets-link {
			background-color: #34c759;
		}
		
		.day-tickets-link:hover {
			background-color: #2aa147;
		}
		
		.no-results {
			text-align: center;
			background-color: var(--bg-light);
			padding: 30px;
			border-radius: 8px;
			margin-top: 20px;
		}
		
		.no-results p {
			margin-bottom: 15px;
			color: var(--text-light);
		}

		/* TBC Section */
		.tbc-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
			gap: 15px;
		}

		.tbc-item {
			background-color: var(--bg-light);
			padding: 15px 20px;
			border-radius: 8px;
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		.tbc-name {
			font-weight: 500;
		}

		.tbc-label {
			background-color: #e9e9e9;
			color: var(--text-light);
			padding: 3px 8px;
			border-radius: 4px;
			font-size: 0.8rem;
			font-weight: 500;
		}

		/* Contribute Section */
		.contribute-section {
			margin: 60px 0;
			padding: 40px;
			background-color: var(--bg-light);
			border-radius: 10px;
		}
		
		.contribute-section h2 {
			text-align: center;
			margin-bottom: 30px;
		}
		
		.contribute-content > p {
			text-align: center;
			max-width: 600px;
			margin: 0 auto 40px;
			font-size: 1.1rem;
		}
		
		.contribute-options {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 30px;
		}
		
		.contribute-option {
			background-color: white;
			padding: 30px;
			border-radius: 8px;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			display: flex;
			flex-direction: column;
		}
		
		.contribute-option h3 {
			color: var(--primary);
			margin-bottom: 15px;
		}
		
		.contribute-option p {
			margin-bottom: 20px;
			flex-grow: 1;
		}
		
		.contribute-button {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			padding: 10px 20px;
			border-radius: 50px;
			font-weight: 500;
			transition: transform 0.2s, background-color 0.2s;
			text-align: center;
			margin-top: auto;
		}
		
		.contribute-button:hover {
			background-color: var(--primary-dark);
			transform: translateY(-2px);
		}
		
		.coming-soon-form {
			display: flex;
			flex-direction: column;
			align-items: center;
		}
		
		.form-note {
			background-color: #f8f4ff;
			color: #6b46c1;
			padding: 10px 15px;
			border-radius: 6px;
			font-size: 0.9rem;
			font-weight: 500;
			margin-bottom: 15px;
			text-align: center;
			width: 100%;
		}
		
		@media (max-width: 768px) {
			.contribute-section {
				padding: 30px 20px;
			}
		}
	</style>

	<script>
		// Wait for the DOM to be fully loaded
		document.addEventListener('DOMContentLoaded', function() {
			// Get elements
			const cardViewBtn = document.getElementById('card-view-btn');
			const dayViewBtn = document.getElementById('day-view-btn');
			const cardView = document.getElementById('card-view');
			const dayView = document.getElementById('day-view');
			const dayBtns = document.querySelectorAll('.day-btn');
			const tagBtns = document.querySelectorAll('.tag-btn');
			const resetFiltersBtn = document.getElementById('reset-filters');
			const resetFiltersInlineBtn = document.getElementById('reset-filters-inline');
			const resetFiltersDayInlineBtn = document.getElementById('reset-filters-day-inline');
			const activeFiltersList = document.getElementById('active-filters-list');
			const noResults = document.getElementById('no-results');
			const noDayResults = document.getElementById('no-day-results');
			
			// Initial state
			let activeView = 'card';
			let activeDay = 'all';
			let activeTags = [];
			
			// Toggle view mode
			cardViewBtn.addEventListener('click', function() {
				setViewMode('card');
			});
			
			dayViewBtn.addEventListener('click', function() {
				setViewMode('day');
			});
			
			// Set active view mode
			function setViewMode(mode) {
				activeView = mode;
				
				// Update UI
				if (mode === 'card') {
					cardViewBtn.classList.add('active');
					cardViewBtn.setAttribute('aria-pressed', 'true');
					dayViewBtn.classList.remove('active');
					dayViewBtn.setAttribute('aria-pressed', 'false');
					
					cardView.classList.add('active');
					dayView.classList.remove('active');
				} else {
					dayViewBtn.classList.add('active');
					dayViewBtn.setAttribute('aria-pressed', 'true');
					cardViewBtn.classList.remove('active');
					cardViewBtn.setAttribute('aria-pressed', 'false');
					
					dayView.classList.add('active');
					cardView.classList.remove('active');
				}
				
				// Apply filters to the new view
				applyFilters();
			}
			
			// Day filter buttons
			dayBtns.forEach(btn => {
				btn.addEventListener('click', function() {
					const day = this.dataset.day;
					
					// Update active day
					activeDay = day;
					
					// Update UI
					dayBtns.forEach(btn => btn.classList.remove('active'));
					this.classList.add('active');
					
					// Update active filters list
					updateActiveFilters();
					
					// Apply filters
					applyFilters();
				});
			});
			
			// Tag filter buttons
			tagBtns.forEach(btn => {
				btn.addEventListener('click', function() {
					const tag = this.dataset.tag;
					
					// Toggle tag in active tags
					const tagIndex = activeTags.indexOf(tag);
					if (tagIndex === -1) {
						activeTags.push(tag);
						this.classList.add('active');
					} else {
						activeTags.splice(tagIndex, 1);
						this.classList.remove('active');
					}
					
					// Update active filters list
					updateActiveFilters();
					
					// Apply filters
					applyFilters();
				});
			});
			
			// Reset filters
			function resetFilters() {
				// Reset day filter
				activeDay = 'all';
				dayBtns.forEach(btn => {
					if (btn.dataset.day === 'all') {
						btn.classList.add('active');
					} else {
						btn.classList.remove('active');
					}
				});
				
				// Reset tag filters
				activeTags = [];
				tagBtns.forEach(btn => btn.classList.remove('active'));
				
				// Update active filters list
				updateActiveFilters();
				
				// Apply filters
				applyFilters();
			}
			
			// Add event listeners to reset buttons
			if (resetFiltersBtn) resetFiltersBtn.addEventListener('click', resetFilters);
			if (resetFiltersInlineBtn) resetFiltersInlineBtn.addEventListener('click', resetFilters);
			if (resetFiltersDayInlineBtn) resetFiltersDayInlineBtn.addEventListener('click', resetFilters);
			
			// Update active filters display
			function updateActiveFilters() {
				// Clear current filters
				activeFiltersList.innerHTML = '';
				
				// Add day filter if not 'all'
				if (activeDay !== 'all') {
					const dayBtn = document.querySelector(`.day-btn[data-day="${activeDay}"]`);
					const dayLabel = dayBtn ? dayBtn.textContent : activeDay;
					
					const filterTag = document.createElement('span');
					filterTag.className = 'active-filter';
					filterTag.innerHTML = `Day: ${dayLabel} <span class="remove-filter">✕</span>`;
					
					const removeBtn = filterTag.querySelector('.remove-filter');
					removeBtn.addEventListener('click', function() {
						// Reset day filter to 'all'
						activeDay = 'all';
						dayBtns.forEach(btn => {
							if (btn.dataset.day === 'all') {
								btn.classList.add('active');
							} else {
								btn.classList.remove('active');
							}
						});
						
						// Update filters
						updateActiveFilters();
						applyFilters();
					});
					
					activeFiltersList.appendChild(filterTag);
				}
				
				// Add tag filters
				activeTags.forEach(tag => {
					const filterTag = document.createElement('span');
					filterTag.className = 'active-filter';
					filterTag.innerHTML = `${tag} <span class="remove-filter">✕</span>`;
					
					const removeBtn = filterTag.querySelector('.remove-filter');
					removeBtn.addEventListener('click', function() {
						// Remove tag from active tags
						const tagIndex = activeTags.indexOf(tag);
						if (tagIndex !== -1) {
							activeTags.splice(tagIndex, 1);
						}
						
						// Update tag button state
						const tagBtn = document.querySelector(`.tag-btn[data-tag="${tag}"]`);
						if (tagBtn) {
							tagBtn.classList.remove('active');
						}
						
						// Update filters
						updateActiveFilters();
						applyFilters();
					});
					
					activeFiltersList.appendChild(filterTag);
				});
			}
			
			// Apply all active filters
			function applyFilters() {
				if (activeView === 'card') {
					// Filter events in card view
					const eventBoxes = document.querySelectorAll('#card-view .event-box');
					let visibleCount = 0;
					
					eventBoxes.forEach(box => {
						const date = box.dataset.date || '';
						const tags = (box.dataset.tags || '').split(',').filter(tag => tag.trim() !== '');
						
						// Check if event matches filters
						const matchesDay = activeDay === 'all' || date === activeDay;
						const matchesTags = activeTags.length === 0 || 
							activeTags.some(tag => tags.includes(tag));
						
						// Show/hide based on filter match
						if (matchesDay && matchesTags) {
							box.style.display = '';
							visibleCount++;
						} else {
							box.style.display = 'none';
						}
					});
					
					// Show "no results" message if no events match
					if (visibleCount === 0) {
						noResults.style.display = 'block';
					} else {
						noResults.style.display = 'none';
					}
				} else {
					// Filter events in day view
					const dayGroups = document.querySelectorAll('#day-view .day-group');
					let visibleDayGroups = 0;
					
					dayGroups.forEach(group => {
						const date = group.dataset.date || '';
						
						// Check if day matches filter
						const matchesDay = activeDay === 'all' || date === activeDay;
						
						if (matchesDay) {
							// Show the day group
							group.style.display = '';
							
							// Filter events within this day
							const events = group.querySelectorAll('.day-event');
							let visibleEvents = 0;
							
							events.forEach(event => {
								const tags = (event.dataset.tags || '').split(',').filter(tag => tag.trim() !== '');
								
								// Check if event matches tag filters
								const matchesTags = activeTags.length === 0 || 
									activeTags.some(tag => tags.includes(tag));
								
								// Show/hide based on tag match
								if (matchesTags) {
									event.style.display = '';
									visibleEvents++;
								} else {
									event.style.display = 'none';
								}
							});
							
							// If no events are visible in this day, hide the day group
							if (visibleEvents === 0) {
								group.style.display = 'none';
							} else {
								visibleDayGroups++;
							}
						} else {
							group.style.display = 'none';
						}
					});
					
					// Show "no results" message if no day groups match
					if (visibleDayGroups === 0) {
						noDayResults.style.display = 'block';
					} else {
						noDayResults.style.display = 'none';
					}
				}
			}
			
			// Initialize
			updateActiveFilters();
			applyFilters();
		});
	</script>
</BaseLayout>
