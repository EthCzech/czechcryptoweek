---
import { fallbackEvents } from '../data/fallbackEvents.js';
import BaseLayout from '../layouts/BaseLayout.astro';

// Use GitHub raw URL for deployed site with error handling
let events = [];
try {
	const response = await fetch('https://raw.githubusercontent.com/EthCzech/czechcryptoweek/main/events/index.json');
	events = await response.json();
} catch (error) {
	console.error('Error fetching events:', error);
	// Fallback data if fetch fails
	events = fallbackEvents;
}

// More explicit filtering logic to ensure proper categorization
const confirmedEvents = events.filter(event => event.confirmed === true);
const tbcEvents = events.filter(event => event.confirmed === false);

// Compute unique dates and tags for filtering
const eventDates = confirmedEvents
	.filter(event => event.dateISO) // Filter events with valid dates
	.map(event => ({
		date: event.dateISO,
		displayDate: new Date(event.dateISO).toLocaleDateString('en-US', { 
			weekday: 'short', 
			month: 'short', 
			day: 'numeric' 
		})
	}));

// Remove duplicates and sort by date
const uniqueDates = Array.from(
	new Map(eventDates.map(item => [item.date, item])).values()
).sort((a, b) => new Date(a.date) - new Date(b.date));

// Get all unique tags across events
const allTags = [...new Set(
	confirmedEvents.flatMap(event => event.tags || [])
)].sort();

// Group events by date for display
const eventsByDate = {};
confirmedEvents.forEach(event => {
	if (!event.dateISO) return;
	
	const date = event.dateISO;
	if (!eventsByDate[date]) {
		eventsByDate[date] = [];
	}
	eventsByDate[date].push(event);
});

console.log("Confirmed events:", confirmedEvents.map(e => e.name));
console.log("TBC events:", tbcEvents.map(e => e.name));
---

<BaseLayout title="Czech Crypto Week | Prague Blockchain Week 2025" description="The premier blockchain and cryptocurrency event series in Prague, Czech Republic. Join global developers, entrepreneurs, and enthusiasts in Central Europe's crypto hub.">
	<!-- Hero Section -->
	<section class="hero">
		<div class="hero-content">
			<h1>Czech Crypto Week 2025</h1>
			<p class="hero-subtitle">May 26 - June 1, 2025 • Prague, Czech Republic</p>
			<p class="hero-description">
				A week of blockchain and cryptocurrency events bringing together the global crypto community in the heart of Europe. 
				Also known as Prague Blockchain Week, this is the premier crypto gathering in Central Europe.
			</p>
			<a href="#events" class="hero-cta">Explore Events</a>
		</div>
		<div class="hero-pattern"></div>
	</section>

	<!-- Confirmed Events Section -->
	<section id="events" class="events-section">
		<h2>Confirmed Events</h2>
		
		<!-- View Toggle -->
		<div class="view-toggle-container">
			<div class="view-toggle">
				<button class="view-toggle-button" data-view="cards">Card View</button>
				<button class="view-toggle-button selected" data-view="days">Days View</button>
			</div>
		</div>
		
		<!-- Day Filter Buttons -->
		<div class="filter-section day-filter-section">
			<h3>Filter by Day</h3>
			<div class="day-filter">
				<button class="filter-button day-button selected" data-day="all">All Days</button>
				{uniqueDates.map(dateObj => (
					<button class="filter-button day-button" data-day={dateObj.date}>
						{dateObj.displayDate}
					</button>
				))}
			</div>
		</div>
		
		<!-- Tag Filter Buttons -->
		<div class="filter-section">
			<h3>Filter by Category</h3>
			<div class="tag-filter">
				{allTags.map(tag => (
					<button class="filter-button tag-button" data-tag={tag}>{tag}</button>
				))}
			</div>
		</div>
		
		<!-- Events Grouped by Date -->
		<div class="events-container days-view">
			{uniqueDates.map(dateObj => (
				<div class="date-group" data-date={dateObj.date}>
					<h3 class="date-heading">
						{new Date(dateObj.date).toLocaleDateString('en-US', { 
							weekday: 'long', 
							month: 'long', 
							day: 'numeric' 
						})}
					</h3>
					<ul class="event-list">
						{eventsByDate[dateObj.date].map(event => (
							<li class="event-box" data-tags={event.tags?.join(',')}>
								<a href={`/events/${event.id}`} class="event-link">
									<div class="event-content">
										<h3 class="event-title">{event.name}</h3>
										<p class="event-date">{event.date}</p>
										
										<div class="tags-list">
											{event.tags?.map(tag => (
												<span class="tag">{tag}</span>
											))}
										</div>
										
										<p class="event-description">{event.short_description}</p>
									</div>
								</a>
								{event.website && (
									<a href={event.website} target="_blank" rel="noopener noreferrer" class="website-link" onclick="event.stopPropagation();">
										Visit Official Website
									</a>
								)}
							</li>
						))}
					</ul>
				</div>
			))}
			
			<div class="no-results hidden">
				<p>No events match your selected filters. Please try different filter options.</p>
			</div>
		</div>
		
		<!-- Original Card View -->
		<div class="events-container cards-view hidden">
			<ul class="event-list">
				{confirmedEvents.map(event => (
					<li class="event-box" data-tags={event.tags?.join(',')} data-date={event.dateISO}>
						<a href={`/events/${event.id}`} class="event-link">
							<div class="event-content">
								<h3 class="event-title">{event.name}</h3>
								<p class="event-date">{event.date}</p>
								
								<div class="tags-list">
									{event.tags?.map(tag => (
										<span class="tag">{tag}</span>
									))}
								</div>
								
								<p class="event-description">{event.short_description}</p>
							</div>
						</a>
						{event.website && (
							<a href={event.website} target="_blank" rel="noopener noreferrer" class="website-link" onclick="event.stopPropagation();">
								Visit Official Website
							</a>
						)}
					</li>
				))}
			</ul>
			
			<div class="no-results hidden">
				<p>No events match your selected filters. Please try different filter options.</p>
			</div>
		</div>
	</section>
	
	<!-- TBC Events Section -->
	{tbcEvents.length > 0 && (
		<section class="tbc-section">
			<h2>To Be Confirmed</h2>
			<ul class="tbc-list">
				{tbcEvents.map(event => (
					<li class="tbc-item">
						<span class="tbc-name">{event.name}</span>
						<span class="tbc-label">TBC</span>
					</li>
				))}
			</ul>
		</section>
	)}
	
	<!-- Contribute Section -->
	<section class="contribute-section">
		<h2>Contribute</h2>
		<div class="contribute-content">
			<p>Czech Crypto Week is an open-source initiative. Anyone can organize a side event or contribute to the project.</p>
			
			<div class="contribute-options">
				<div class="contribute-option">
					<h3>Add Your Event</h3>
					<p>Want to organize an event during Czech Crypto Week? Submit your event details through a GitHub pull request or contact us directly.</p>
					<div class="coming-soon-form">
						<p class="form-note">✨ Event submission form coming soon! ✨</p>
						<a href="mailto:ethczech@gmail.com" class="contribute-button">Contact Us</a>
					</div>
				</div>
				
				<div class="contribute-option">
					<h3>Improve the Website</h3>
					<p>This website is open-source. Help us improve it by submitting pull requests or reporting issues on GitHub.</p>
					<a href="https://github.com/EthCzech/czechcryptoweek" target="_blank" rel="noopener noreferrer" class="contribute-button">GitHub Repository</a>
				</div>
			</div>
		</div>
	</section>

	<style>
		/* Hero Section */
		.hero {
			position: relative;
			background: linear-gradient(135deg, var(--primary), var(--primary-dark));
			color: white;
			padding: 80px 20px;
			text-align: center;
			border-radius: 10px;
			overflow: hidden;
			margin-bottom: 50px;
		}

		.hero-content {
			position: relative;
			z-index: 2;
			max-width: 800px;
			margin: 0 auto;
		}

		.hero h1 {
			color: white;
			font-size: 3rem;
			margin-bottom: 15px;
		}

		.hero-subtitle {
			font-size: 1.2rem;
			margin-bottom: 20px;
			opacity: 0.9;
		}

		.hero-description {
			font-size: 1.1rem;
			max-width: 600px;
			margin: 0 auto 30px;
			opacity: 0.8;
		}

		.hero-cta {
			display: inline-block;
			background-color: white;
			color: var(--primary);
			font-weight: 500;
			padding: 12px 25px;
			border-radius: 50px;
			transition: transform 0.3s, box-shadow 0.3s;
		}

		.hero-cta:hover {
			transform: translateY(-3px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.hero-pattern {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background-image: 
				radial-gradient(circle at 20% 30%, rgba(255, 255, 255, 0.1) 0%, transparent 10%),
				radial-gradient(circle at 80% 70%, rgba(255, 255, 255, 0.1) 0%, transparent 10%);
			z-index: 1;
		}

		/* Filters */
		.filter-section {
			margin: 30px 0;
		}
		
		.filter-section h3 {
			font-size: 1.1rem;
			margin-bottom: 15px;
			text-align: center;
		}
		
		.day-filter, .tag-filter {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			gap: 10px;
			margin-bottom: 20px;
		}
		
		.filter-button {
			padding: 8px 16px;
			border: 1px solid #e0e0e0;
			background-color: white;
			border-radius: 30px;
			font-size: 0.9rem;
			cursor: pointer;
			transition: all 0.2s ease;
		}
		
		.filter-button:hover {
			background-color: #f5f5f5;
		}
		
		.filter-button.selected {
			background-color: var(--primary);
			color: white;
			border-color: var(--primary);
		}
		
		.tag-button {
			font-size: 0.85rem;
		}
		
		/* View Toggle */
		.view-toggle-container {
			display: flex;
			justify-content: center;
			margin: 30px 0 15px;
		}
		
		.view-toggle {
			display: inline-flex;
			background-color: #f0f0f0;
			border-radius: 30px;
			padding: 4px;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
		}
		
		.view-toggle-button {
			padding: 8px 20px;
			border: none;
			background-color: transparent;
			border-radius: 25px;
			font-size: 0.95rem;
			font-weight: 500;
			cursor: pointer;
			transition: all 0.2s ease;
		}
		
		.view-toggle-button:hover {
			background-color: rgba(0, 0, 0, 0.05);
		}
		
		.view-toggle-button.selected {
			background-color: white;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}
		
		/* Events Container */
		.date-group {
			margin-bottom: 40px;
		}
		
		.date-heading {
			margin-bottom: 20px;
			color: var(--primary);
			font-size: 1.5rem;
			padding-bottom: 10px;
			border-bottom: 1px solid #e0e0e0;
		}

		/* Events Section */
		.events-section, .tbc-section {
			margin: 60px 0;
		}

		.events-section h2, .tbc-section h2 {
			text-align: center;
			margin-bottom: 30px;
		}

		.event-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
			gap: 25px;
		}

		.event-box {
			background-color: var(--bg-light);
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			transition: transform 0.3s, box-shadow 0.3s;
			position: relative;
			display: flex;
			flex-direction: column;
			height: 100%;
		}

		.event-box:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.event-link {
			display: block;
			text-decoration: none;
			color: inherit;
			flex: 1;
			display: flex;
			flex-direction: column;
		}

		.event-content {
			padding: 25px;
			flex: 1;
			display: flex;
			flex-direction: column;
			min-height: 250px;
		}

		.event-title {
			color: var(--primary);
			font-size: 1.4rem;
			margin-bottom: 10px;
			min-height: 3.5rem;
			display: flex;
			align-items: flex-start;
		}

		.event-date {
			color: var(--text-light);
			font-size: 0.95rem;
			margin-bottom: 15px;
			flex-shrink: 0;
		}
		
		.tags-list {
			display: flex;
			flex-wrap: wrap;
			gap: 5px;
			margin-bottom: 15px;
		}
		
		.tag {
			background-color: #e0e0e0;
			color: #666;
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 0.8rem;
			font-weight: 500;
		}

		.event-description {
			margin-bottom: 20px;
			line-height: 1.5;
			flex-grow: 1;
		}

		.website-link {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			padding: 8px 16px;
			margin: 0 25px 25px;
			border-radius: 4px;
			font-size: 0.9rem;
			font-weight: 500;
			transition: background-color 0.3s;
			text-align: center;
			margin-top: auto;
		}

		.website-link:hover {
			background-color: var(--primary-dark);
		}
		
		.no-results {
			text-align: center;
			padding: 40px 20px;
			background-color: var(--bg-light);
			border-radius: 8px;
			margin-top: 20px;
		}
		
		.hidden {
			display: none;
		}

		/* TBC Section */
		.tbc-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
			gap: 15px;
		}

		.tbc-item {
			background-color: var(--bg-light);
			padding: 15px 20px;
			border-radius: 8px;
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		.tbc-name {
			font-weight: 500;
		}

		.tbc-label {
			background-color: #e9e9e9;
			color: var(--text-light);
			padding: 3px 8px;
			border-radius: 4px;
			font-size: 0.8rem;
			font-weight: 500;
		}

		@media (max-width: 768px) {
			.hero h1 {
				font-size: 2.5rem;
			}

			.event-list {
				grid-template-columns: 1fr;
			}
		}
		
		/* Contribute Section */
		.contribute-section {
			margin: 60px 0;
			padding: 40px;
			background-color: var(--bg-light);
			border-radius: 10px;
		}
		
		.contribute-section h2 {
			text-align: center;
			margin-bottom: 30px;
		}
		
		.contribute-content > p {
			text-align: center;
			max-width: 600px;
			margin: 0 auto 40px;
			font-size: 1.1rem;
		}
		
		.contribute-options {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 30px;
		}
		
		.contribute-option {
			background-color: white;
			padding: 30px;
			border-radius: 8px;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			display: flex;
			flex-direction: column;
		}
		
		.contribute-option h3 {
			color: var(--primary);
			margin-bottom: 15px;
		}
		
		.contribute-option p {
			margin-bottom: 20px;
			flex-grow: 1;
		}
		
		.contribute-button {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			padding: 10px 20px;
			border-radius: 50px;
			font-weight: 500;
			transition: transform 0.2s, background-color 0.2s;
			text-align: center;
			margin-top: auto;
		}
		
		.contribute-button:hover {
			background-color: var(--primary-dark);
			transform: translateY(-2px);
		}
		
		.coming-soon-form {
			display: flex;
			flex-direction: column;
			align-items: center;
		}
		
		.form-note {
			background-color: #f8f4ff;
			color: #6b46c1;
			padding: 10px 15px;
			border-radius: 6px;
			font-size: 0.9rem;
			font-weight: 500;
			margin-bottom: 15px;
			text-align: center;
			width: 100%;
		}
		
		@media (max-width: 768px) {
			.contribute-section {
				padding: 30px 20px;
			}
		}
	</style>
	
	<script>
		// Initialize filter state
		let selectedDay = null;
		let selectedTags = new Set();
		let currentView = 'days'; // Default view is 'days'
		
		document.addEventListener('DOMContentLoaded', () => {
			const dayButtons = document.querySelectorAll('.day-button');
			const tagButtons = document.querySelectorAll('.tag-button');
			const dateGroups = document.querySelectorAll('.date-group');
			const dayFilterSection = document.querySelector('.day-filter-section');
			const daysView = document.querySelector('.days-view');
			const cardsView = document.querySelector('.cards-view');
			const viewToggleButtons = document.querySelectorAll('.view-toggle-button');
			const dayViewNoResults = document.querySelector('.days-view .no-results');
			const cardViewNoResults = document.querySelector('.cards-view .no-results');
			
			// View toggle buttons click handler
			viewToggleButtons.forEach(button => {
				button.addEventListener('click', () => {
					// Update UI - highlight selected button
					viewToggleButtons.forEach(btn => btn.classList.remove('selected'));
					button.classList.add('selected');
					
					// Get selected view
					const selectedView = button.dataset.view;
					
					// Toggle view visibility
					if (selectedView === 'days') {
						daysView.classList.remove('hidden');
						cardsView.classList.add('hidden');
						dayFilterSection.classList.remove('hidden');
						currentView = 'days';
					} else { // cards view
						daysView.classList.add('hidden');
						cardsView.classList.remove('hidden');
						dayFilterSection.classList.toggle('hidden', selectedDay === null);
						currentView = 'cards';
						// Apply filters to card view
						applyCardViewFilters();
					}
				});
			});
			
			// Day filter button click handler
			dayButtons.forEach(button => {
				button.addEventListener('click', () => {
					// Update UI - highlight selected button
					dayButtons.forEach(btn => btn.classList.remove('selected'));
					button.classList.add('selected');
					
					// Update filter state
					selectedDay = button.dataset.day === 'all' ? null : button.dataset.day;
					
					// Apply filters based on current view
					if (currentView === 'days') {
						applyDayViewFilters(dateGroups, dayViewNoResults);
					} else {
						applyCardViewFilters();
					}
				});
			});
			
			// Tag filter button click handler
			tagButtons.forEach(button => {
				button.addEventListener('click', () => {
					// Toggle button selection state
					button.classList.toggle('selected');
					
					// Update filter state
					const tag = button.dataset.tag;
					if (selectedTags.has(tag)) {
						selectedTags.delete(tag);
					} else {
						selectedTags.add(tag);
					}
					
					// Apply filters based on current view
					if (currentView === 'days') {
						applyDayViewFilters(dateGroups, dayViewNoResults);
					} else {
						applyCardViewFilters();
					}
				});
			});
			
			// Filter application logic for day view
			function applyDayViewFilters(dateGroups, noResults) {
				let hasVisibleEvents = false;
				
				dateGroups.forEach(group => {
					// First filter by day
					const dayMatches = !selectedDay || group.dataset.date === selectedDay;
					
					if (dayMatches) {
						group.classList.remove('hidden');
						
						// Then filter events within this day by tags
						const eventBoxes = group.querySelectorAll('.event-box');
						let hasVisibleEventsInGroup = false;
						
						eventBoxes.forEach(box => {
							// Get event tags
							const eventTags = box.dataset.tags ? box.dataset.tags.split(',') : [];
							
							// Check if event should be visible based on selected tags
							const tagMatches = selectedTags.size === 0 || 
								[...selectedTags].some(tag => eventTags.includes(tag));
							
							if (tagMatches) {
								box.classList.remove('hidden');
								hasVisibleEventsInGroup = true;
								hasVisibleEvents = true;
							} else {
								box.classList.add('hidden');
							}
						});
						
						// If no events are visible in this group, hide the whole group
						if (!hasVisibleEventsInGroup) {
							group.classList.add('hidden');
						}
					} else {
						group.classList.add('hidden');
					}
				});
				
				// Show "no results" message if needed
				if (hasVisibleEvents) {
					noResults.classList.add('hidden');
				} else {
					noResults.classList.remove('hidden');
				}
			}
			
			// Filter application logic for card view
			function applyCardViewFilters() {
				const eventBoxes = cardsView.querySelectorAll('.event-box');
				let hasVisibleEvents = false;
				
				eventBoxes.forEach(box => {
					// Get event data
					const eventTags = box.dataset.tags ? box.dataset.tags.split(',') : [];
					const eventDate = box.dataset.date;
					
					// Check day filter
					const dayMatches = !selectedDay || eventDate === selectedDay;
					
					// Check tag filter
					const tagMatches = selectedTags.size === 0 || 
						[...selectedTags].some(tag => eventTags.includes(tag));
					
					// Show/hide based on filters
					if (dayMatches && tagMatches) {
						box.classList.remove('hidden');
						hasVisibleEvents = true;
					} else {
						box.classList.add('hidden');
					}
				});
				
				// Show "no results" message if needed
				if (hasVisibleEvents) {
					cardViewNoResults.classList.add('hidden');
				} else {
					cardViewNoResults.classList.remove('hidden');
				}
			}
		});
	</script>
</BaseLayout>
