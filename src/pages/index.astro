---
import { fallbackEvents } from '../data/fallbackEvents.js';
import BaseLayout from '../layouts/BaseLayout.astro';

// Fetch event data from GitHub repository with error handling
async function fetchEventData() {
	try {
		console.log("Fetching event data...");
		const response = await fetch('https://raw.githubusercontent.com/EthCzech/czechcryptoweek/main/events/index.json');
		
		if (!response.ok) {
			console.error(`Failed to fetch data: ${response.status} ${response.statusText}`);
			console.log("Using fallback events:", fallbackEvents.map(e => e.name));
			return fallbackEvents;
		}
		
		const data = await response.json();
		console.log("Successfully fetched event data");
		return data;
	} catch (error) {
		console.error("Error fetching event data:", error);
		console.log("Using fallback events due to error:", fallbackEvents.map(e => e.name));
		return fallbackEvents;
	}
}

// Define functions for sorting and processing events
function processEvents(events) {
	console.log("Processing events:", events.map(e => e.name));

	const confirmed = events.filter(event => event.confirmed);
	const tbc = events.filter(event => !event.confirmed);
	
	// Debug events
	console.log("All events:", events.map(e => e.name));
	console.log("Confirmed events:", confirmed.map(e => e.name));
	console.log("TBC events:", tbc.map(e => e.name));

	// Get unique dates for filtering
	const uniqueDatesMap = new Map();
	
	// Track all events by date for the day view
	const eventsByDate = {};
	
	// Expand multi-day events to appear on each day they occur
	confirmed.forEach(event => {
		if (!event.dateISO) return;
		
		// Parse date ranges for multi-day events
		let startDate, endDate;
		
		if (event.date && event.date.includes('-')) {
			// Check if this is a date range like "May 28-31, 2025"
			const dateParts = event.date.match(/([a-zA-Z]+)\s+(\d+)-(\d+),\s+(\d+)/);
			
			if (dateParts) {
				// This is a multi-day event in the same month
				const [_, month, startDay, endDay, year] = dateParts;
				startDate = new Date(event.dateISO);
				
				// Create end date by parsing from the date string
				const monthIndex = new Date(`${month} 1, ${year}`).getMonth();
				endDate = new Date(parseInt(year), monthIndex, parseInt(endDay));
			} else if (event.date.includes(' - ')) {
				// This is a date range like "May 30 - June 1, 2025"
				const [startDateStr, endDateStr] = event.date.split(' - ');
				startDate = new Date(event.dateISO);
				
				// Try to parse the end date from the format
				const endParts = endDateStr.match(/([a-zA-Z]+)\s+(\d+),\s+(\d+)/);
				if (endParts) {
					const [_, month, day, year] = endParts;
					const monthIndex = new Date(`${month} 1, ${year}`).getMonth();
					endDate = new Date(parseInt(year), monthIndex, parseInt(day));
				}
			}
		}
		
		// Default to single day if no range was parsed
		if (!startDate) {
			startDate = new Date(event.dateISO);
			endDate = new Date(event.dateISO);
		}
		
		// Add the event to each day it spans
		let currentDate = new Date(startDate);
		let dayCounter = 1;
		const totalDays = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;
		
		while (currentDate <= endDate) {
			const dateString = currentDate.toISOString().split('T')[0];
			
			// Create a copy of the event for this day with day indicator
			const eventCopy = {...event};
			
			// Add day indicator for multi-day events
			if (totalDays > 1) {
				eventCopy.dayIndicator = `Day ${dayCounter}/${totalDays}`;
			}
			
			// Initialize the array for this date if it doesn't exist yet
			if (!eventsByDate[dateString]) {
				eventsByDate[dateString] = [];
			}
			
			// Add event to this date's array
			eventsByDate[dateString].push(eventCopy);
			
			// Add to unique dates map for filtering UI
			uniqueDatesMap.set(dateString, {
				date: dateString,
				displayDate: currentDate.toLocaleDateString('en-US', {
					month: 'short',
					day: 'numeric'
				})
			});
			
			// Move to next day
			currentDate.setDate(currentDate.getDate() + 1);
			dayCounter++;
		}
	});
	
	// Convert the map to an array and sort by date
	const uniqueDates = Array.from(uniqueDatesMap.values())
		.sort((a, b) => new Date(a.date) - new Date(b.date));
	
	// Get unique tags for filtering
	const uniqueTags = new Set();
	confirmed.forEach(event => {
		if (event.tags) {
			event.tags.forEach(tag => uniqueTags.add(tag));
		}
	});
	
	return {
		confirmedEvents: confirmed,
		tbcEvents: tbc,
		uniqueDates,
		uniqueTags: Array.from(uniqueTags).sort(),
		eventsByDate
	};
}

// Fetch event data and handle errors
const eventData = await fetchEventData();
const { confirmedEvents, tbcEvents, uniqueDates, uniqueTags, eventsByDate } = processEvents(eventData);

// Get all unique tags for filtering UI
const allTags = [...uniqueTags];

console.log("Final confirmed events:", confirmedEvents.map(e => e.name));
---

<BaseLayout title="Czech Crypto Week | Prague Blockchain Week 2025" description="The premier blockchain and cryptocurrency event series in Prague, Czech Republic. Join global developers, entrepreneurs, and enthusiasts in Central Europe's crypto hub.">
	<!-- Hero Section -->
	<section class="hero">
		<div class="hero-content">
			<h1>Czech Crypto Week 2025</h1>
			<p class="hero-subtitle">May 26 - June 1, 2025 • Prague, Czech Republic</p>
			<p class="hero-description">
				A week of blockchain and cryptocurrency events bringing together the global crypto community in the heart of Europe. 
				Also known as Prague Blockchain Week, this is the premier crypto gathering in Central Europe.
			</p>
			<a href="#events" class="hero-cta">Explore Events</a>
		</div>
		<div class="hero-pattern"></div>
	</section>

	<!-- Confirmed Events Section -->
	<section id="events" class="events-section">
		<h2>Confirmed Events</h2>
		<ul class="event-list">
			{confirmedEvents.map(event => (
				<li class="event-box">
					<a href={`/events/${event.id}`} class="event-link">
						<div class="event-content">
							<h3 class="event-title">{event.name}</h3>
							<p class="event-date">{event.date}</p>
							<p class="event-description">{event.short_description}</p>
						</div>
					</a>
					{event.website && (
						<a href={event.website} target="_blank" rel="noopener noreferrer" class="website-link" onclick="event.stopPropagation();">
							Visit Official Website
						</a>
					)}
				</li>
			))}
		</ul>
	</section>
	
	<!-- TBC Events Section -->
	{tbcEvents.length > 0 && (
		<section class="tbc-section">
			<h2>To Be Confirmed</h2>
			<ul class="tbc-list">
				{tbcEvents.map(event => (
					<li class="tbc-item">
						<span class="tbc-name">{event.name}</span>
						<span class="tbc-label">TBC</span>
					</li>
				))}
			</ul>
		</section>
	)}
	
	<!-- Contribute Section -->
	<section class="contribute-section">
		<h2>Contribute</h2>
		<div class="contribute-content">
			<p>Czech Crypto Week is an open-source initiative. Anyone can organize a side event or contribute to the project.</p>
			
			<div class="contribute-options">
				<div class="contribute-option">
					<h3>Add Your Event</h3>
					<p>Want to organize an event during Czech Crypto Week? Submit your event details through a GitHub pull request or contact us directly.</p>
					<div class="coming-soon-form">
						<p class="form-note">✨ Event submission form coming soon! ✨</p>
						<a href="mailto:ethczech@gmail.com" class="contribute-button">Contact Us</a>
					</div>
				</div>
				
				<div class="contribute-option">
					<h3>Improve the Website</h3>
					<p>This website is open-source. Help us improve it by submitting pull requests or reporting issues on GitHub.</p>
					<a href="https://github.com/EthCzech/czechcryptoweek" target="_blank" rel="noopener noreferrer" class="contribute-button">GitHub Repository</a>
				</div>
			</div>
		</div>
	</section>

	<style>
		/* Hero Section */
		.hero {
			position: relative;
			background: linear-gradient(135deg, var(--primary), var(--primary-dark));
			color: white;
			padding: 80px 20px;
			text-align: center;
			border-radius: 10px;
			overflow: hidden;
			margin-bottom: 50px;
		}

		.hero-content {
			position: relative;
			z-index: 2;
			max-width: 800px;
			margin: 0 auto;
		}

		.hero h1 {
			color: white;
			font-size: 3rem;
			margin-bottom: 15px;
		}

		.hero-subtitle {
			font-size: 1.2rem;
			margin-bottom: 20px;
			opacity: 0.9;
		}

		.hero-description {
			font-size: 1.1rem;
			max-width: 600px;
			margin: 0 auto 30px;
			opacity: 0.8;
		}

		.hero-cta {
			display: inline-block;
			background-color: white;
			color: var(--primary);
			font-weight: 500;
			padding: 12px 25px;
			border-radius: 50px;
			transition: transform 0.3s, box-shadow 0.3s;
		}

		.hero-cta:hover {
			transform: translateY(-3px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.hero-pattern {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background-image: 
				radial-gradient(circle at 20% 30%, rgba(255, 255, 255, 0.1) 0%, transparent 10%),
				radial-gradient(circle at 80% 70%, rgba(255, 255, 255, 0.1) 0%, transparent 10%);
			z-index: 1;
		}

		/* Events Section */
		.events-section, .tbc-section {
			margin: 60px 0;
		}

		.events-section h2, .tbc-section h2 {
			text-align: center;
			margin-bottom: 30px;
		}

		.event-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
			gap: 25px;
		}

		.event-box {
			background-color: var(--bg-light);
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			transition: transform 0.3s, box-shadow 0.3s;
			position: relative;
			display: flex;
			flex-direction: column;
			height: 100%;
		}

		.event-box:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.event-link {
			display: block;
			text-decoration: none;
			color: inherit;
			flex: 1;
			display: flex;
			flex-direction: column;
		}

		.event-content {
			padding: 25px;
			flex: 1;
			display: flex;
			flex-direction: column;
			min-height: 250px;
		}

		.event-title {
			color: var(--primary);
			font-size: 1.4rem;
			margin-bottom: 10px;
			min-height: 3.5rem;
			display: flex;
			align-items: flex-start;
		}

		.event-date {
			color: var(--text-light);
			font-size: 0.95rem;
			margin-bottom: 15px;
			flex-shrink: 0;
		}

		.event-description {
			margin-bottom: 20px;
			line-height: 1.5;
			flex-grow: 1;
		}

		.website-link {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			padding: 8px 16px;
			margin: 0 25px 25px;
			border-radius: 4px;
			font-size: 0.9rem;
			font-weight: 500;
			transition: background-color 0.3s;
			text-align: center;
			margin-top: auto;
		}

		.website-link:hover {
			background-color: var(--primary-dark);
		}

		/* TBC Section */
		.tbc-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
			gap: 15px;
		}

		.tbc-item {
			background-color: var(--bg-light);
			padding: 15px 20px;
			border-radius: 8px;
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		.tbc-name {
			font-weight: 500;
		}

		.tbc-label {
			background-color: #e9e9e9;
			color: var(--text-light);
			padding: 3px 8px;
			border-radius: 4px;
			font-size: 0.8rem;
			font-weight: 500;
		}

		@media (max-width: 768px) {
			.hero h1 {
				font-size: 2.5rem;
			}

			.event-list {
				grid-template-columns: 1fr;
			}
		}
		
		/* Contribute Section */
		.contribute-section {
			margin: 60px 0;
			padding: 40px;
			background-color: var(--bg-light);
			border-radius: 10px;
		}
		
		.contribute-section h2 {
			text-align: center;
			margin-bottom: 30px;
		}
		
		.contribute-content > p {
			text-align: center;
			max-width: 600px;
			margin: 0 auto 40px;
			font-size: 1.1rem;
		}
		
		.contribute-options {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 30px;
		}
		
		.contribute-option {
			background-color: white;
			padding: 30px;
			border-radius: 8px;
			box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
			display: flex;
			flex-direction: column;
		}
		
		.contribute-option h3 {
			color: var(--primary);
			margin-bottom: 15px;
		}
		
		.contribute-option p {
			margin-bottom: 20px;
			flex-grow: 1;
		}
		
		.contribute-button {
			display: inline-block;
			background-color: var(--primary);
			color: white;
			padding: 10px 20px;
			border-radius: 50px;
			font-weight: 500;
			transition: transform 0.2s, background-color 0.2s;
			text-align: center;
			margin-top: auto;
		}
		
		.contribute-button:hover {
			background-color: var(--primary-dark);
			transform: translateY(-2px);
		}
		
		.coming-soon-form {
			display: flex;
			flex-direction: column;
			align-items: center;
		}
		
		.form-note {
			background-color: #f8f4ff;
			color: #6b46c1;
			padding: 10px 15px;
			border-radius: 6px;
			font-size: 0.9rem;
			font-weight: 500;
			margin-bottom: 15px;
			text-align: center;
			width: 100%;
		}
		
		@media (max-width: 768px) {
			.contribute-section {
				padding: 30px 20px;
			}
		}
	</style>
</BaseLayout>
